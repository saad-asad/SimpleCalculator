{"ast":null,"code":"import { isBigNumber } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'intersect';\nvar dependencies = ['typed', 'config', 'abs', 'add', 'addScalar', 'matrix', 'multiply', 'multiplyScalar', 'divideScalar', 'subtract', 'smaller', 'equalScalar', 'flatten'];\nexport var createIntersect = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    abs,\n    add,\n    addScalar,\n    matrix,\n    multiply,\n    multiplyScalar,\n    divideScalar,\n    subtract,\n    smaller,\n    equalScalar,\n    flatten\n  } = _ref;\n  /**\n   * Calculates the point of intersection of two lines in two or three dimensions\n   * and of a line and a plane in three dimensions. The inputs are in the form of\n   * arrays or 1 dimensional matrices. The line intersection functions return null\n   * if the lines do not meet.\n   *\n   * Note: Fill the plane coefficients as `x + y + z = c` and not as `x + y + z + c = 0`.\n   *\n   * Syntax:\n   *\n   *    math.intersect(endPoint1Line1, endPoint2Line1, endPoint1Line2, endPoint2Line2)\n   *    math.intersect(endPoint1, endPoint2, planeCoefficients)\n   *\n   * Examples:\n   *\n   *    math.intersect([0, 0], [10, 10], [10, 0], [0, 10])              // Returns [5, 5]\n   *    math.intersect([0, 0, 0], [10, 10, 0], [10, 0, 0], [0, 10, 0])  // Returns [5, 5, 0]\n   *    math.intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6])            // Returns [7, -4, 3]\n   *\n   * @param  {Array | Matrix} w   Co-ordinates of first end-point of first line\n   * @param  {Array | Matrix} x   Co-ordinates of second end-point of first line\n   * @param  {Array | Matrix} y   Co-ordinates of first end-point of second line\n   *                              OR Co-efficients of the plane's equation\n   * @param  {Array | Matrix} z   Co-ordinates of second end-point of second line\n   *                              OR undefined if the calculation is for line and plane\n   * @return {Array}              Returns the point of intersection of lines/lines-planes\n   */\n\n  return typed('intersect', {\n    'Array, Array, Array': _AAA,\n    'Array, Array, Array, Array': _AAAA,\n    'Matrix, Matrix, Matrix': function MatrixMatrixMatrix(x, y, plane) {\n      var arr = _AAA(x.valueOf(), y.valueOf(), plane.valueOf());\n\n      return arr === null ? null : matrix(arr);\n    },\n    'Matrix, Matrix, Matrix, Matrix': function MatrixMatrixMatrixMatrix(w, x, y, z) {\n      // TODO: output matrix type should match input matrix type\n      var arr = _AAAA(w.valueOf(), x.valueOf(), y.valueOf(), z.valueOf());\n\n      return arr === null ? null : matrix(arr);\n    }\n  });\n\n  function _AAA(x, y, plane) {\n    x = _coerceArr(x);\n    y = _coerceArr(y);\n    plane = _coerceArr(plane);\n\n    if (!_3d(x)) {\n      throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');\n    }\n\n    if (!_3d(y)) {\n      throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');\n    }\n\n    if (!_4d(plane)) {\n      throw new TypeError('Array with 4 numbers expected as third argument');\n    }\n\n    return _intersectLinePlane(x[0], x[1], x[2], y[0], y[1], y[2], plane[0], plane[1], plane[2], plane[3]);\n  }\n\n  function _AAAA(w, x, y, z) {\n    w = _coerceArr(w);\n    x = _coerceArr(x);\n    y = _coerceArr(y);\n    z = _coerceArr(z);\n\n    if (w.length === 2) {\n      if (!_2d(w)) {\n        throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');\n      }\n\n      if (!_2d(x)) {\n        throw new TypeError('Array with 2 numbers or BigNumbers expected for second argument');\n      }\n\n      if (!_2d(y)) {\n        throw new TypeError('Array with 2 numbers or BigNumbers expected for third argument');\n      }\n\n      if (!_2d(z)) {\n        throw new TypeError('Array with 2 numbers or BigNumbers expected for fourth argument');\n      }\n\n      return _intersect2d(w, x, y, z);\n    } else if (w.length === 3) {\n      if (!_3d(w)) {\n        throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');\n      }\n\n      if (!_3d(x)) {\n        throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');\n      }\n\n      if (!_3d(y)) {\n        throw new TypeError('Array with 3 numbers or BigNumbers expected for third argument');\n      }\n\n      if (!_3d(z)) {\n        throw new TypeError('Array with 3 numbers or BigNumbers expected for fourth argument');\n      }\n\n      return _intersect3d(w[0], w[1], w[2], x[0], x[1], x[2], y[0], y[1], y[2], z[0], z[1], z[2]);\n    } else {\n      throw new TypeError('Arrays with two or thee dimensional points expected');\n    }\n  }\n  /** Coerce row and column 2-dim arrays to 1-dim array */\n\n\n  function _coerceArr(arr) {\n    // row matrix\n    if (arr.length === 1) return arr[0]; // column matrix\n\n    if (arr.length > 1 && Array.isArray(arr[0])) {\n      if (arr.every(el => Array.isArray(el) && el.length === 1)) return flatten(arr);\n    }\n\n    return arr;\n  }\n\n  function _isNumeric(a) {\n    // intersect supports numbers and bignumbers\n    return typeof a === 'number' || isBigNumber(a);\n  }\n\n  function _2d(x) {\n    return x.length === 2 && _isNumeric(x[0]) && _isNumeric(x[1]);\n  }\n\n  function _3d(x) {\n    return x.length === 3 && _isNumeric(x[0]) && _isNumeric(x[1]) && _isNumeric(x[2]);\n  }\n\n  function _4d(x) {\n    return x.length === 4 && _isNumeric(x[0]) && _isNumeric(x[1]) && _isNumeric(x[2]) && _isNumeric(x[3]);\n  }\n\n  function _intersect2d(p1a, p1b, p2a, p2b) {\n    var o1 = p1a;\n    var o2 = p2a;\n    var d1 = subtract(o1, p1b);\n    var d2 = subtract(o2, p2b);\n    var det = subtract(multiplyScalar(d1[0], d2[1]), multiplyScalar(d2[0], d1[1]));\n\n    if (smaller(abs(det), config.epsilon)) {\n      return null;\n    }\n\n    var d20o11 = multiplyScalar(d2[0], o1[1]);\n    var d21o10 = multiplyScalar(d2[1], o1[0]);\n    var d20o21 = multiplyScalar(d2[0], o2[1]);\n    var d21o20 = multiplyScalar(d2[1], o2[0]);\n    var t = divideScalar(addScalar(subtract(subtract(d20o11, d21o10), d20o21), d21o20), det);\n    return add(multiply(d1, t), o1);\n  }\n\n  function _intersect3dHelper(a, b, c, d, e, f, g, h, i, j, k, l) {\n    // (a - b)*(c - d) + (e - f)*(g - h) + (i - j)*(k - l)\n    var add1 = multiplyScalar(subtract(a, b), subtract(c, d));\n    var add2 = multiplyScalar(subtract(e, f), subtract(g, h));\n    var add3 = multiplyScalar(subtract(i, j), subtract(k, l));\n    return addScalar(addScalar(add1, add2), add3);\n  }\n\n  function _intersect3d(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4) {\n    var d1343 = _intersect3dHelper(x1, x3, x4, x3, y1, y3, y4, y3, z1, z3, z4, z3);\n\n    var d4321 = _intersect3dHelper(x4, x3, x2, x1, y4, y3, y2, y1, z4, z3, z2, z1);\n\n    var d1321 = _intersect3dHelper(x1, x3, x2, x1, y1, y3, y2, y1, z1, z3, z2, z1);\n\n    var d4343 = _intersect3dHelper(x4, x3, x4, x3, y4, y3, y4, y3, z4, z3, z4, z3);\n\n    var d2121 = _intersect3dHelper(x2, x1, x2, x1, y2, y1, y2, y1, z2, z1, z2, z1);\n\n    var ta = divideScalar(subtract(multiplyScalar(d1343, d4321), multiplyScalar(d1321, d4343)), subtract(multiplyScalar(d2121, d4343), multiplyScalar(d4321, d4321)));\n    var tb = divideScalar(addScalar(d1343, multiplyScalar(ta, d4321)), d4343);\n    var pax = addScalar(x1, multiplyScalar(ta, subtract(x2, x1)));\n    var pay = addScalar(y1, multiplyScalar(ta, subtract(y2, y1)));\n    var paz = addScalar(z1, multiplyScalar(ta, subtract(z2, z1)));\n    var pbx = addScalar(x3, multiplyScalar(tb, subtract(x4, x3)));\n    var pby = addScalar(y3, multiplyScalar(tb, subtract(y4, y3)));\n    var pbz = addScalar(z3, multiplyScalar(tb, subtract(z4, z3)));\n\n    if (equalScalar(pax, pbx) && equalScalar(pay, pby) && equalScalar(paz, pbz)) {\n      return [pax, pay, paz];\n    } else {\n      return null;\n    }\n  }\n\n  function _intersectLinePlane(x1, y1, z1, x2, y2, z2, x, y, z, c) {\n    var x1x = multiplyScalar(x1, x);\n    var x2x = multiplyScalar(x2, x);\n    var y1y = multiplyScalar(y1, y);\n    var y2y = multiplyScalar(y2, y);\n    var z1z = multiplyScalar(z1, z);\n    var z2z = multiplyScalar(z2, z);\n    var numerator = subtract(subtract(subtract(c, x1x), y1y), z1z);\n    var denominator = subtract(subtract(subtract(addScalar(addScalar(x2x, y2y), z2z), x1x), y1y), z1z);\n    var t = divideScalar(numerator, denominator);\n    var px = addScalar(x1, multiplyScalar(t, subtract(x2, x1)));\n    var py = addScalar(y1, multiplyScalar(t, subtract(y2, y1)));\n    var pz = addScalar(z1, multiplyScalar(t, subtract(z2, z1)));\n    return [px, py, pz]; // TODO: Add cases when line is parallel to the plane:\n    //       (a) no intersection,\n    //       (b) line contained in plane\n  }\n});","map":{"version":3,"sources":["/home/saad/Js Apps/SimpleCalculator/node_modules/mathjs/lib/esm/function/geometry/intersect.js"],"names":["isBigNumber","factory","name","dependencies","createIntersect","_ref","typed","config","abs","add","addScalar","matrix","multiply","multiplyScalar","divideScalar","subtract","smaller","equalScalar","flatten","_AAA","_AAAA","MatrixMatrixMatrix","x","y","plane","arr","valueOf","MatrixMatrixMatrixMatrix","w","z","_coerceArr","_3d","TypeError","_4d","_intersectLinePlane","length","_2d","_intersect2d","_intersect3d","Array","isArray","every","el","_isNumeric","a","p1a","p1b","p2a","p2b","o1","o2","d1","d2","det","epsilon","d20o11","d21o10","d20o21","d21o20","t","_intersect3dHelper","b","c","d","e","f","g","h","i","j","k","l","add1","add2","add3","x1","y1","z1","x2","y2","z2","x3","y3","z3","x4","y4","z4","d1343","d4321","d1321","d4343","d2121","ta","tb","pax","pay","paz","pbx","pby","pbz","x1x","x2x","y1y","y2y","z1z","z2z","numerator","denominator","px","py","pz"],"mappings":"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","sourcesContent":["import { isBigNumber } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'intersect';\nvar dependencies = ['typed', 'config', 'abs', 'add', 'addScalar', 'matrix', 'multiply', 'multiplyScalar', 'divideScalar', 'subtract', 'smaller', 'equalScalar', 'flatten'];\nexport var createIntersect = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    abs,\n    add,\n    addScalar,\n    matrix,\n    multiply,\n    multiplyScalar,\n    divideScalar,\n    subtract,\n    smaller,\n    equalScalar,\n    flatten\n  } = _ref;\n\n  /**\n   * Calculates the point of intersection of two lines in two or three dimensions\n   * and of a line and a plane in three dimensions. The inputs are in the form of\n   * arrays or 1 dimensional matrices. The line intersection functions return null\n   * if the lines do not meet.\n   *\n   * Note: Fill the plane coefficients as `x + y + z = c` and not as `x + y + z + c = 0`.\n   *\n   * Syntax:\n   *\n   *    math.intersect(endPoint1Line1, endPoint2Line1, endPoint1Line2, endPoint2Line2)\n   *    math.intersect(endPoint1, endPoint2, planeCoefficients)\n   *\n   * Examples:\n   *\n   *    math.intersect([0, 0], [10, 10], [10, 0], [0, 10])              // Returns [5, 5]\n   *    math.intersect([0, 0, 0], [10, 10, 0], [10, 0, 0], [0, 10, 0])  // Returns [5, 5, 0]\n   *    math.intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6])            // Returns [7, -4, 3]\n   *\n   * @param  {Array | Matrix} w   Co-ordinates of first end-point of first line\n   * @param  {Array | Matrix} x   Co-ordinates of second end-point of first line\n   * @param  {Array | Matrix} y   Co-ordinates of first end-point of second line\n   *                              OR Co-efficients of the plane's equation\n   * @param  {Array | Matrix} z   Co-ordinates of second end-point of second line\n   *                              OR undefined if the calculation is for line and plane\n   * @return {Array}              Returns the point of intersection of lines/lines-planes\n   */\n  return typed('intersect', {\n    'Array, Array, Array': _AAA,\n    'Array, Array, Array, Array': _AAAA,\n    'Matrix, Matrix, Matrix': function MatrixMatrixMatrix(x, y, plane) {\n      var arr = _AAA(x.valueOf(), y.valueOf(), plane.valueOf());\n\n      return arr === null ? null : matrix(arr);\n    },\n    'Matrix, Matrix, Matrix, Matrix': function MatrixMatrixMatrixMatrix(w, x, y, z) {\n      // TODO: output matrix type should match input matrix type\n      var arr = _AAAA(w.valueOf(), x.valueOf(), y.valueOf(), z.valueOf());\n\n      return arr === null ? null : matrix(arr);\n    }\n  });\n\n  function _AAA(x, y, plane) {\n    x = _coerceArr(x);\n    y = _coerceArr(y);\n    plane = _coerceArr(plane);\n\n    if (!_3d(x)) {\n      throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');\n    }\n\n    if (!_3d(y)) {\n      throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');\n    }\n\n    if (!_4d(plane)) {\n      throw new TypeError('Array with 4 numbers expected as third argument');\n    }\n\n    return _intersectLinePlane(x[0], x[1], x[2], y[0], y[1], y[2], plane[0], plane[1], plane[2], plane[3]);\n  }\n\n  function _AAAA(w, x, y, z) {\n    w = _coerceArr(w);\n    x = _coerceArr(x);\n    y = _coerceArr(y);\n    z = _coerceArr(z);\n\n    if (w.length === 2) {\n      if (!_2d(w)) {\n        throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');\n      }\n\n      if (!_2d(x)) {\n        throw new TypeError('Array with 2 numbers or BigNumbers expected for second argument');\n      }\n\n      if (!_2d(y)) {\n        throw new TypeError('Array with 2 numbers or BigNumbers expected for third argument');\n      }\n\n      if (!_2d(z)) {\n        throw new TypeError('Array with 2 numbers or BigNumbers expected for fourth argument');\n      }\n\n      return _intersect2d(w, x, y, z);\n    } else if (w.length === 3) {\n      if (!_3d(w)) {\n        throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');\n      }\n\n      if (!_3d(x)) {\n        throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');\n      }\n\n      if (!_3d(y)) {\n        throw new TypeError('Array with 3 numbers or BigNumbers expected for third argument');\n      }\n\n      if (!_3d(z)) {\n        throw new TypeError('Array with 3 numbers or BigNumbers expected for fourth argument');\n      }\n\n      return _intersect3d(w[0], w[1], w[2], x[0], x[1], x[2], y[0], y[1], y[2], z[0], z[1], z[2]);\n    } else {\n      throw new TypeError('Arrays with two or thee dimensional points expected');\n    }\n  }\n  /** Coerce row and column 2-dim arrays to 1-dim array */\n\n\n  function _coerceArr(arr) {\n    // row matrix\n    if (arr.length === 1) return arr[0]; // column matrix\n\n    if (arr.length > 1 && Array.isArray(arr[0])) {\n      if (arr.every(el => Array.isArray(el) && el.length === 1)) return flatten(arr);\n    }\n\n    return arr;\n  }\n\n  function _isNumeric(a) {\n    // intersect supports numbers and bignumbers\n    return typeof a === 'number' || isBigNumber(a);\n  }\n\n  function _2d(x) {\n    return x.length === 2 && _isNumeric(x[0]) && _isNumeric(x[1]);\n  }\n\n  function _3d(x) {\n    return x.length === 3 && _isNumeric(x[0]) && _isNumeric(x[1]) && _isNumeric(x[2]);\n  }\n\n  function _4d(x) {\n    return x.length === 4 && _isNumeric(x[0]) && _isNumeric(x[1]) && _isNumeric(x[2]) && _isNumeric(x[3]);\n  }\n\n  function _intersect2d(p1a, p1b, p2a, p2b) {\n    var o1 = p1a;\n    var o2 = p2a;\n    var d1 = subtract(o1, p1b);\n    var d2 = subtract(o2, p2b);\n    var det = subtract(multiplyScalar(d1[0], d2[1]), multiplyScalar(d2[0], d1[1]));\n\n    if (smaller(abs(det), config.epsilon)) {\n      return null;\n    }\n\n    var d20o11 = multiplyScalar(d2[0], o1[1]);\n    var d21o10 = multiplyScalar(d2[1], o1[0]);\n    var d20o21 = multiplyScalar(d2[0], o2[1]);\n    var d21o20 = multiplyScalar(d2[1], o2[0]);\n    var t = divideScalar(addScalar(subtract(subtract(d20o11, d21o10), d20o21), d21o20), det);\n    return add(multiply(d1, t), o1);\n  }\n\n  function _intersect3dHelper(a, b, c, d, e, f, g, h, i, j, k, l) {\n    // (a - b)*(c - d) + (e - f)*(g - h) + (i - j)*(k - l)\n    var add1 = multiplyScalar(subtract(a, b), subtract(c, d));\n    var add2 = multiplyScalar(subtract(e, f), subtract(g, h));\n    var add3 = multiplyScalar(subtract(i, j), subtract(k, l));\n    return addScalar(addScalar(add1, add2), add3);\n  }\n\n  function _intersect3d(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4) {\n    var d1343 = _intersect3dHelper(x1, x3, x4, x3, y1, y3, y4, y3, z1, z3, z4, z3);\n\n    var d4321 = _intersect3dHelper(x4, x3, x2, x1, y4, y3, y2, y1, z4, z3, z2, z1);\n\n    var d1321 = _intersect3dHelper(x1, x3, x2, x1, y1, y3, y2, y1, z1, z3, z2, z1);\n\n    var d4343 = _intersect3dHelper(x4, x3, x4, x3, y4, y3, y4, y3, z4, z3, z4, z3);\n\n    var d2121 = _intersect3dHelper(x2, x1, x2, x1, y2, y1, y2, y1, z2, z1, z2, z1);\n\n    var ta = divideScalar(subtract(multiplyScalar(d1343, d4321), multiplyScalar(d1321, d4343)), subtract(multiplyScalar(d2121, d4343), multiplyScalar(d4321, d4321)));\n    var tb = divideScalar(addScalar(d1343, multiplyScalar(ta, d4321)), d4343);\n    var pax = addScalar(x1, multiplyScalar(ta, subtract(x2, x1)));\n    var pay = addScalar(y1, multiplyScalar(ta, subtract(y2, y1)));\n    var paz = addScalar(z1, multiplyScalar(ta, subtract(z2, z1)));\n    var pbx = addScalar(x3, multiplyScalar(tb, subtract(x4, x3)));\n    var pby = addScalar(y3, multiplyScalar(tb, subtract(y4, y3)));\n    var pbz = addScalar(z3, multiplyScalar(tb, subtract(z4, z3)));\n\n    if (equalScalar(pax, pbx) && equalScalar(pay, pby) && equalScalar(paz, pbz)) {\n      return [pax, pay, paz];\n    } else {\n      return null;\n    }\n  }\n\n  function _intersectLinePlane(x1, y1, z1, x2, y2, z2, x, y, z, c) {\n    var x1x = multiplyScalar(x1, x);\n    var x2x = multiplyScalar(x2, x);\n    var y1y = multiplyScalar(y1, y);\n    var y2y = multiplyScalar(y2, y);\n    var z1z = multiplyScalar(z1, z);\n    var z2z = multiplyScalar(z2, z);\n    var numerator = subtract(subtract(subtract(c, x1x), y1y), z1z);\n    var denominator = subtract(subtract(subtract(addScalar(addScalar(x2x, y2y), z2z), x1x), y1y), z1z);\n    var t = divideScalar(numerator, denominator);\n    var px = addScalar(x1, multiplyScalar(t, subtract(x2, x1)));\n    var py = addScalar(y1, multiplyScalar(t, subtract(y2, y1)));\n    var pz = addScalar(z1, multiplyScalar(t, subtract(z2, z1)));\n    return [px, py, pz]; // TODO: Add cases when line is parallel to the plane:\n    //       (a) no intersection,\n    //       (b) line contained in plane\n  }\n});"]},"metadata":{},"sourceType":"module"}